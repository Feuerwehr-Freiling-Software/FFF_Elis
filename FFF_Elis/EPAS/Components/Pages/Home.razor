@page "/"
@using Blazored.LocalStorage
@using EPAS.BusinessLogic.Dtos
@using EPAS.BusinessLogic.Helper
@using EPAS.Core.BusinessObjects
@using EPAS.Core.Enums
@using EPAS.Shared.Services
@using FFF_Elis.Components.BusinessObjects
@using EPAS.Components.Components
@using EPAS.Core.Interfaces

@inject ILocalStorageService LocalStorage
@inject GeocodingService GeocodingService
@inject IOperationService OperationService

<EinsatzTimerComponent OnOperationUpdate="OnOperationUpdate" />

@if (EinsatzAnzeigen)
{
    <div class="home-container">
        <div class="Infotext" style="margin-top: 3%;">
            <div class="Einsatzgrund"><strong>Einsatzgrund:</strong> @Einsatz.OperationName</div>
            <div class="Ort"><strong>Ort:</strong> @Einsatz.Adress</div>
            <div class="Anrufer"><strong>Anrufer:</strong> @Einsatz.CallerName</div>
            <div class="Info" style="margin-left: 10%"><strong>Info:</strong>
                <p>@Einsatz.Info</p>
            </div>
        </div>
        <div class="Rueckmeldungen" style="overflow-y: scroll"><OperationResponseListComponent Responses="Rueckmeldungen"/></div>
        <div class="Karte"><MapComponent Waypoints="Waypoints" /></div>
    </div>
}
else
{
    <div style="margin-left: 4rem;">
        <VisualItemComponent Items="ClientSettings.VisualItems" />
    </div>
}

@code
{
    public OperationDto Einsatz { get; set; } = new ();

    public ClientSettings ClientSettings { get; set; } = new();
    
    private bool EinsatzAnzeigen { get; set; } = false;
    
    public List<OperationResponseDto> Rueckmeldungen { get; set; } =
    [
        new () { Username = "Haunschmied Bastian", Response = OperationResponseEnum.Coming },
        new () { Username =  "Haunschmied Bastian", Response = OperationResponseEnum.Coming },
        new () { Username =  "Haunschmied Bastian", Response = OperationResponseEnum.Coming },
        new () { Username =  "Haunschmied Bastian", Response = OperationResponseEnum.Coming },
        new () { Username =  "Leutgöb Fabian", Response = OperationResponseEnum.Available },
        new () { Username =  "Leutgöb Fabian", Response = OperationResponseEnum.Available },
        new () { Username =  "Leutgöb Fabian", Response = OperationResponseEnum.Available },
        new () { Username =  "Leutgöb Lukas", Response = OperationResponseEnum.NotAvailable },
        new () { Username =  "Leutgöb Lukas", Response = OperationResponseEnum.NotAvailable },
        new () { Username =  "Leutgöb Lukas", Response = OperationResponseEnum.NotAvailable },
        new () { Username =  "Leutgöb Lukas", Response = OperationResponseEnum.NotAvailable },
        new () { Username =  "Leutgöb Lukas", Response = OperationResponseEnum.Read },
        new () { Username =  "Leutgöb Lukas", Response = OperationResponseEnum.Read },
    ];

    public List<Waypoint> Waypoints { get; set; } = new()
    {
        new Waypoint { lat = 48.236121f, lon= 14.123097f }
    };
    
    private async Task AddRueckmeldung()
    {
        var random = new Random();
        Rueckmeldungen.Add(new OperationResponseDto() { Username = "Haunschmied Bastian", Response = (OperationResponseEnum)random.Next(-1,3) });
    }

    private void OnEinsatzClosed()
    {
        EinsatzAnzeigen = false;
    }

    private async Task OnOperationUpdate(List<OperationDto> operationDtos)
    {
        if (operationDtos.Count == 0)
        {
            EinsatzAnzeigen = false;
            return;
        }
        
        await OnNewEinsatz(operationDtos.First());
    }
    
    private async Task OnNewEinsatz(OperationDto einsatzdaten)
    {
        Einsatz = einsatzdaten;
        EinsatzAnzeigen = true;

        Waypoint? coords = null;
        
        try
        {
            coords = await GeocodingService.GetWaypointAsync(einsatzdaten.Adress);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        Waypoints = [new Waypoint { lat = 48.236121f, lon= 14.123097f }];

        if (coords != null)
        {
            Waypoints.Add(new Waypoint { lat = coords.lat, lon = coords.lon });
        }
        
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ClientSettings = (await LocalStorage.GetItemAsync<ClientSettings>("ClientSettings")) ?? new ();

            if (ClientSettings.ShowEinsaetze == true)
            {
                ClientSettings.VisualItems.Add(new VisualItem { Type = VisualItemType.EinsatzOOE, Duration = 30, Name = "Einsätze OÖ", Description = "Aktuelle Einsätze in Oberösterreich"});       
            }

            var openOperations = (await OperationService.GetOpenOperationsByFirebrigade(ClientSettings.ApiKey)).ToOperationDto().OrderByDescending(x => x.Recieved);
            
            if (openOperations.Any())
            {
                await OnNewEinsatz(openOperations.First());
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }
}