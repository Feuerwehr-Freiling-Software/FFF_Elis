@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu Style="background-color: var(--fro-background); color: var(--fro-text);">
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="testing" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Testing</MudNavLink>
    <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Auth Required</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Manage">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken/>
                    <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                    <button type="submit" class="nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Register">
                    <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Login">
                    <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? _currentUrl;

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}