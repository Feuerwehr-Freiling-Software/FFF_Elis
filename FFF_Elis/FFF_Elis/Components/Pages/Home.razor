@page "/"
@using Blazored.LocalStorage
@using ELISWCFService
@using FFF_Elis.Components.BusinessObjects
@using FFF_Elis.ELIS_Services
@using FFF_Elis.Components.Components
@using FFF_Elis.Components.Services

@inject ILocalStorageService LocalStorage
@inject GeocodingService GeocodingService

<EinsatzTimerComponent OnEinsatzClosed="OnEinsatzClosed" OnNewEinsatz="OnNewEinsatz"/>

@if (EinsatzAnzeigen)
{
    <div class="home-container">
        <div class="Infotext" style="margin-top: 3%;">
            <div class="Einsatzgrund"><strong>Einsatzgrund:</strong> @Einsatz.Einsatzgrund</div>
            <div class="Ort"><strong>Ort:</strong> @Einsatz.Adresse</div>
            <div class="Anrufer"><strong>Anrufer:</strong> @Einsatz.Anrufer</div>
            <div class="Info" style="margin-left: 10%"><strong>Info:</strong>
                <p>@Einsatz.Information</p>
            </div>
        </div>
        <div class="Rueckmeldungen" style="overflow-y: scroll"><RueckmeldeListe Rueckmeldungen="Rueckmeldungen"/></div>
        <div class="Karte"><MapComponent Waypoints="Waypoints" /></div>
    </div>
}
else
{
    <VisualItemComponent Items="ClientSettings.VisualItems" />
}

@code
{
    public List<WCFBenutzer> Users { get; set; } = [];
    public ElisClient Client { get; set; } = new ();
    public WCFEinsatzdaten Einsatz { get; set; } = new ();

    public ClientSettings ClientSettings { get; set; } = new();
    
    private bool EinsatzAnzeigen { get; set; } = false;
    
    public List<Einsatzrueckmeldung> Rueckmeldungen { get; set; } =
    [
        new Einsatzrueckmeldung() { Name = "Haunschmied Bastian", Status = RueckmeldungsStatus.Komme },
        new Einsatzrueckmeldung() { Name = "Haunschmied Bastian", Status = RueckmeldungsStatus.Komme },
        new Einsatzrueckmeldung() { Name = "Haunschmied Bastian", Status = RueckmeldungsStatus.Komme },
        new Einsatzrueckmeldung() { Name = "Haunschmied Bastian", Status = RueckmeldungsStatus.Komme },
        new Einsatzrueckmeldung() { Name = "Leutgöb Fabian", Status = RueckmeldungsStatus.Verfuegbar },
        new Einsatzrueckmeldung() { Name = "Leutgöb Fabian", Status = RueckmeldungsStatus.Verfuegbar },
        new Einsatzrueckmeldung() { Name = "Leutgöb Fabian", Status = RueckmeldungsStatus.Verfuegbar },
        new Einsatzrueckmeldung() { Name = "Leutgöb Lukas", Status = RueckmeldungsStatus.NichtVerfuegbar },
        new Einsatzrueckmeldung() { Name = "Leutgöb Lukas", Status = RueckmeldungsStatus.NichtVerfuegbar },
        new Einsatzrueckmeldung() { Name = "Leutgöb Lukas", Status = RueckmeldungsStatus.NichtVerfuegbar },
        new Einsatzrueckmeldung() { Name = "Leutgöb Lukas", Status = RueckmeldungsStatus.NichtVerfuegbar }
    ];

    public List<Waypoint> Waypoints { get; set; } = new();
    
    private async Task AddRueckmeldung()
    {
        var random = new Random();
        Rueckmeldungen.Add(new Einsatzrueckmeldung() { Name = "Haunschmied Bastian", Status = (RueckmeldungsStatus)random.Next(1,3) });
    }

    private void OnEinsatzClosed()
    {
        EinsatzAnzeigen = false;
    }
    
    private async Task OnNewEinsatz(WCFEinsatzdaten einsatzdaten)
    {
        Einsatz = einsatzdaten;
        EinsatzAnzeigen = true;

        Waypoint? coords = null;
        
        try
        {
            coords = await GeocodingService.GetWaypointAsync(einsatzdaten.Adresse);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        Waypoints = [new Waypoint { lat = 48.236121f, lon= 14.123097f }];

        if (coords != null)
        {
            Waypoints.Add(new Waypoint { lat = coords.lat, lon = coords.lon });
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    protected override void OnInitialized()
    {
        Users = Client.Client.UserGetAll(new UserGetAllRequest(Client.Ticket.TicketID)).UserGetAllResult.ToList();
        //var tmp = Client.Client.EinsatzPersonGetByEinsatz(new EinsatzPersonGetByEinsatzRequest("einsatzNr", Client.Ticket.TicketID));
        var tmp1 = Client.Client.EinsatzDataGetAll(new EinsatzDataGetAllRequest(Client.Ticket.TicketID));
        //var rueckmeldungen = Client.Client.EinsatzPersonGetByEinsatz(new EinsatzPersonGetByEinsatzRequest(tmp1.EinsatzDataGetAllResult.First().EinsatzNr, Client.Ticket.TicketID));
        //var coordinates = (tmp1.EinsatzDataGetAllResult.First().Fahrzeuge.First().LFKLongitude, tmp1.EinsatzDataGetAllResult.First().Fahrzeuge.First().LFKLatitude);
        //var arlamierteFFs = tmp1.EinsatzDataGetAllResult.First().Alarmierungen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ClientSettings.VisualItems = (await LocalStorage.GetItemAsync<ClientSettings>("ClientSettings"))?.VisualItems ?? new List<VisualItem>();
        
        await InvokeAsync(StateHasChanged);
    }
}