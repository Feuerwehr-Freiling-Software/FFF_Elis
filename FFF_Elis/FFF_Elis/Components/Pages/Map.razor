@page "/Map"
@using ELISWCFService
@using FFF_Elis.Components.Dialogs
@inject IJSRuntime JS
@inject IDialogService DialogService

<h3>Map</h3>
<MudButton Color="Color.Primary" OnClick="OpenAddVehicle"></MudButton>
<div id="map"></div>


<script>
    L.Routing.Local
    
    var lfbIcon = L.icon({
        iconUrl: './img/LFB_Freiling.png',

        iconSize:     [95, 38], // size of the icon
        iconAnchor:   [40, 20], // point of the icon which will correspond to marker's location
        popupAnchor:  [0, -10] // point from which the popup should open relative to the iconAnchor
    });
    
    var map = L.map('map').setView([48.236121, 14.123097], 13);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
    
    L.marker([48.236121, 14.123097], {icon: lfbIcon}).addTo(map)
        .bindPopup('<b>LFB Freiling</b></br> 48.236121, 14.123097</br> Status: <b>Ausgerückt</b>')
        .openPopup();
        
    L.Routing.control({
        waypoints: [
            L.latLng(48.236121, 14.123097),
            L.latLng(48.226824, 14.161409)
        ],
        routeWhileDragging: true
    }).addTo(map);
    
    function AddVehicleToMap(lat, long, status, name) {
        var vehicleIcon = L.icon({
            iconUrl: './img/LFB_Freiling.png',
    
            iconSize:     [95, 38], // size of the icon
            iconAnchor:   [40, 20], // point of the icon which will correspond to marker's location
            popupAnchor:  [0, -10] // point from which the popup should open relative to the iconAnchor
        });
        
        L.marker([lat, long], {icon: vehicleIcon}).addTo(map)
            .bindPopup('<b>' + name + '</b></br> ' + lat + ', ' + long + '</br> Status: <b>' + status + '</b>')
            .openPopup();
    }
    
</script>

@code {
    public async Task OpenAddVehicle()
    {
        var reference = await DialogService.ShowAsync<AddVehicleDialog>("Add Vehicle");
        var result = await reference.Result;
        
        if (!result.Cancelled)
        {
            var vehicle = result.Data as WCFFahrzeug;
            await JS.InvokeVoidAsync("AddVehicleToMap", vehicle.LFKLatitude, vehicle.LFKLongitude, vehicle.StatusInfo, vehicle.Bezeichnung);
        }
    }
}